<!DOCTYPE html>
<html>
	<head>
		<title>Get Started</title>
		<object data="tabs.xhtml"></object>
		<script>
			ts.ui.ready(function nastyhack() {
				new gui.Request('/dist/sri.json').get().then(function(status, json) {
					ts.ui.ready(function nastyhack() {
						var version = ts.ui.version;
						var figure = document.querySelector('figure');
						var markup = figure.innerHTML;
						figure.innerHTML = markup
							.replace(/\${ts.ui.version}/g, version)
							.replace('${sricss}', json['@css'].integrity)
							.replace('${srijs}', json['@js'].integrity);
					});
				});
			});
		</script>
	</head>
	<body>
		<article>
			<h1>Get started</h1>
			<section class="desc">
				<p>
					This is a good starting point also for visual designers who prefer to work in HTML,
					because the stylesheet delivers all the fonts and icons etc.
				</p>
			</section>
			<section>
				<h3>CDN version</h3>
				<p data-ts="Spirit">
					<script type="text/edbml">
						<span>To get Tradeshift UI up and running on your page, simply include +
						<code>ts.js</code> and <code>ts.css</code> in an appropriate version. The latest version +
						is <code>${ts.ui.version}</code>
					</script>
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						<link rel="stylesheet" href="//d5wfroyti11sa.cloudfront.net/prod/client/ts-${ts.ui.version}.min.css"/>
						<scrxpt src="//d5wfroyti11sa.cloudfront.net/prod/client/ts-${ts.ui.version}.min.js"></scrxpt>
					</script>
				</figure>
				<!--
					<figure data-ts="DoxMarkup">
						<script type="text/html">
							<link rel="stylesheet" href="//d5wfroyti11sa.cloudfront.net/prod/client/ts-${ts.ui.version}.min.css" integrity="${sricss}" crossorigin="anonymous"/>
							<scrxpt src="//d5wfroyti11sa.cloudfront.net/prod/client/ts-${ts.ui.version}.min.js" integrity="${srijs}" crossorigin="anonymous"></scrxpt>
						</script>
					</figure>
					-->
				<h3>NPM version</h3>
				<p>
					Tradeshift UI is also available as a
					<a href="https://www.npmjs.com/package/@tradeshift/tradeshift-ui" target="_blank">
						npm package </a
					>. You can simply install it in your project executing the following command
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						npm i @tradeshift/tradeshift-ui --save
					</script>
				</figure>
				<p>
					then don't forget to import <code>ts.js</code> and <code>ts.css</code> in your main
					application entrypoint
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						import '@tradeshift/tradeshift-ui';
						import '@tradeshift/tradeshift-ui/ts.css';
					</script>
				</figure>
				<p>
					there is a style helpers in the package, so you can import it somewhere in your shared
					styles module. Please note that since it is a <code>less</code> file, you should equip
					your build pipeline with less files loader
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						@import '~@tradeshift/tradeshift-ui/ts-runtime';
					</script>
				</figure>
				<h3>Typescript</h3>
				<p>
					For Typescript projects, we also supply the library with type definitions. Take a look at
					<a href="https://www.npmjs.com/package/@tradeshift/tradeshift-ui-types" target="_blank">
						this package </a
					>and add it to your Typescript application
				</p>
				<figure data-ts="DoxMarkup">
					<script type="text/html">
						npm i @tradeshift/tradeshift-ui-types --save
					</script>
				</figure>
				<h3>Initialization</h3>
				<p>
					UI components are initialized on the
					<code>DOMContentLoaded</code> event, but this might change some day. To make sure that all
					the components are initialized before you do something to them, you can wrap your code in
					a callback like this.
				</p>
				<figure data-ts="DoxScript">
					<script type="text/html">
						ts.ui.ready(function() {
							var component = ts.ui.get(element);
							component.dosomething();
						});
					</script>
				</figure>
				<ul>
					<li>Before <code>DOMContentLoaded</code> the callback will be executed later.</li>
					<li>After <code>DOMContentLoaded</code> the callback will execute immedeately.</li>
				</ul>
				<p>
					You can perhaps make it easier for yourself by kickstarting your app with a
					<code>ts.ui.ready</code> callback, because then you wont&apos;t have to worry about it
					later on.
				</p>
				<figure data-ts="DoxScript">
					<script type="text/html">
						ts.ui.ready(function() {
							boostrap_everything();
						});
					</script>
				</figure>
				<p>
					Before we begin, you&apos;ll need to mark up your page with the
					<a data-ts="Button" href="/#getstarted/layout.html">basic layout</a>.
				</p>
			</section>
		</article>
	</body>
</html>
